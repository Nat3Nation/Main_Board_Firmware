DFA Motherboard Description:
  The DFA motherboard is hooked up to a meter or other electrical source and takes both current and voltage readings using eight onboard 5A current transformers (CTs), two 240VAC voltage input terminals, and two ADE9000 power measurement ICs. The board is powered by either a 240VAC~5VDC onboard power supply, an external 5V battery, or via the programmable interface. These power sources feed the low-voltage power supply, which powers the ADE9000s and ESP32 microcontroller. The ESP32 microcontroller functions as the primary brain of the DFA board, taking readings from the ADE9000s and sending them via Wi-Fi to the database housed on a server running AWS. The ESP32 will also take commands from the user to actuate appliances via client boards, communicating with these boards via Bluetooth. The DFA boards also include four daughter board slots, one of which will house a LoRa module for board-to-board communication. An SD card is also present on the board to allow for continued data collection in emergency situations. 

DFA Motherboard Functionality
  The DFA motherboard acts as the central node where all the project software and hardware components share information. The DFA motherboard is hooked up to the meter or primary feeder to the building to take total energy readings. The DFA is set up to receive data over LoRa in case another building in the network loses Wi-Fi, as well as data over Bluetooth from the client boards present within the building. The DFA motherboard connects to the AWS Linux server over Wi-Fi, sending data to the backend which then stores the data in the database. The DFA motherboard also polls for commands from the backend to actuate the client boards, communicating these commands over Bluetooth.

DFA Motherboard Firmware
  This github contains the firmware for the DFA motherboard. The full firmare implementation for the board is stored in the Master_Firmware folder, and includes LoRa for long range communications, BLE to support communications with a client board, HTTP data transmission and polling for sending data and receiving commands, setting up Wi-Fi, and reading from the ADE9000s. Testing has confirmed the functionality of these components, with results for the LoRa testing stored in ECE 17 Senior Design Group OneDrive. Further work involves extending the firmware to support multiple client boards and to look into the possibility of an RTOS based implementation.


Testing different SPI SS pins for reading ADE9000:

right input. left input.

Pin 0: ok. reads 0

Pin 1: ok. reads 0, the firmware stops working

Pin 2: ok. reads 0

Pin 3: ok. reads 0

Pin 4: ok. reads 0

Pin 5: ok. reads 0

Pin 6: SPI error

Pin 7: SPI error

Pin 8: SPI error

Pin 9: SPI error

Pin 10: SPI error

Pin 11: SPI error

Pin 12: ok. reads 0

Pin 13: ok. reads 0

Pin 14: ok. reads 0

Pin 15: ok. reads 0

Pin 16: ok. reads 0

Pin 17: ok. reads 0

Pin 18: ok. reads 0

Pin 19: ok. reads 0

Pin 20: ok. reads 0

Pin 21: ok. reads 0

Pin 22: ok. reads 0

Pin 23: ok. reads 0

Pin 24: GPIO num error

Pin 25: ok. reads 0

Pin 26: ok. reads 0

Pin 27: ok. reads 0

Pin 28: GPIO num error

Pin 29: GPIO num error

Pin 30: GPIO num error



2IC Stuff:
14:57:22.895 -> Found device at address: 0x00
14:57:22.895 -> Found device at address: 0x20 -> :) hello!
14:57:22.941 -> Found device at address: 0x44
14:57:22.941 -> Found device at address: 0x68
14:57:22.941 -> Found device at address: 0x7C

Solution:
The Expander Address is 0x20
The I2C pins on the ESP32 are 23 and 22

Try to send: 224

https://www.seeedstudio.com/blog/2019/12/13/how-to-generate-pcb-gerber-files-from-cadence-allegro-orcad/

https://community.cadence.com/cadence_technology_forums/pcb-design/f/pcb-editor-skill/43260/import-gerbers-from-altium-to-pcb-editor-16-6

https://www.altium.com/solutions/academic-programs/education-programs


In the lab try:
1. Instead of setting LOW for enabling, try setting HIGH
2. Different expander pins
3. Try accessing another expander?

Lab 02/03/2023:

1. Tried setting LOW for enabling, left ADE9000 
2. Tried setting LOW for enabling, right ADE9000 
3. Tried setting HIGH for enabling, right ADE9000

--Changed Second Byte value from FE to FF
1. Tried setting LOW for enabling, right ADE9000 
2. Tried setting HIGH for enabling, right ADE9000 
3. Tried setting SLOT_RST to 0 - SLOT_RST -> repeated 
4. Tried setting LOW for enabling, right ADE9000 
5. Tried setting HIGH for enabling, right ADE9000 

To DO:
FIRST:
- See if there is a way to 'ping' the ADE9000s
- Read the status of the expander pins RIGHT BEFORE doing SPI read (in the ADE9000.cpp)
- Use the multimeter to see if the VARIAC is even applying any signals.
1. Write a UART implementation to test faster
2. Email Taskin with the updates
3. Play with the RESET Pin
4. Check Voltage Reading code from the ADE9000
5. Read from daughter boards
6. Try three VARIACS
7. Read the PCB layout, to check for enable pins

